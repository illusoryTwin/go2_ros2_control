<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="diff_drive_robot">

    <!-- Constants -->
    <xacro:property name="M_PI" value="3.1415926535897931" />
    <xacro:property name="base_width" value="0.3"/>
    <xacro:property name="base_length" value="0.4"/>
    <xacro:property name="base_height" value="0.1"/>
    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="caster_radius" value="0.02"/>
    <xacro:property name="base_lift" value="0.01"/>
    <xacro:property name="camera_link_size" value="0.05"/>
    <xacro:property name="imu_link_size" value="0.02"/>

    <!-- Base Link -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <material name="blue">
                <color rgba="0.0 0.0 0.8 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="5.0"/>
            <inertia ixx="0.1" ixy="0.0" ixz="0.0" iyy="0.1" iyz="0.0" izz="0.1"/>
        </inertial>
    </link>

    <!-- *** ADD LASER SCANNER LINK AND JOINT *** -->
    <link name="laser_link">
        <visual>
            <geometry>
                <cylinder radius="0.03" length="0.05"/>
            </geometry>
            <material name="grey">
                <color rgba="0.5 0.5 0.5 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <cylinder radius="0.03" length="0.05"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="0.1"/>
            <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
        </inertial>
    </link>

    <joint name="laser_joint" type="fixed">
        <parent link="base_link"/>
        <child link="laser_link"/>
        <!-- Position the laser slightly ahead of the base center and above it -->
        <origin xyz="${base_length/4} 0 ${base_height + 0.025}" rpy="0 0 0"/>
    </joint>
    <!-- *** END LASER SCANNER LINK AND JOINT *** -->
    

    <!-- IMU Link -->
    <link name="imu_link">
        <visual>
            <geometry>
                <box size="${imu_link_size} ${imu_link_size} ${imu_link_size}"/>
            </geometry>
            <material name="red">
                 <color rgba="0.8 0.0 0.0 1.0"/>
            </material>
        </visual>
         <collision>
            <geometry>
                <box size="${imu_link_size} ${imu_link_size} ${imu_link_size}"/>
            </geometry>
        </collision>
         <inertial>
            <mass value="0.01"/>
            <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
        </inertial>
    </link>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 ${base_height/2 + imu_link_size/2}" rpy="0 0 0"/>
    </joint>

    <!-- Camera Link -->
    <link name="camera_link">
        <visual>
            <geometry>
                <box size="${camera_link_size} ${camera_link_size} ${camera_link_size}"/>
            </geometry>
            <material name="green">
                <color rgba="0.0 0.8 0.0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${camera_link_size} ${camera_link_size} ${camera_link_size}"/>
            </geometry>
        </collision>
        <inertial>
             <mass value="0.1"/>
             <inertia ixx="1e-6" ixy="0.0" ixz="0.0" iyy="1e-6" iyz="0.0" izz="1e-6"/>
        </inertial>
    </link>

    <joint name="camera_joint" type="fixed">
        <parent link="base_link"/>
        <child link="camera_link"/>
        <origin xyz="${base_length/2 - camera_link_size/2} 0 ${base_height/2 + camera_link_size/2}" rpy="0 0 0"/>
    </joint>

    <!-- Camera Optical Frame -->
    <link name="camera_depth_optical_frame"/>
    <joint name="camera_optical_joint" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_depth_optical_frame"/>
        <origin xyz="0 0 0" rpy="${-M_PI/2} 0 ${-M_PI/2}"/>
    </joint>

    <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix reflect">
        <link name="${prefix}_wheel_link">
            <visual>
                <origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="black">
                    <color rgba="0.1 0.1 0.1 1.0"/>
                </material>
            </visual>
            <collision>
                 <origin xyz="0 0 0" rpy="${M_PI/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
             <inertial>
                <mass value="1.0"/>
                <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01"/>
            </inertial>
        </link>

        <joint name="${prefix}_wheel_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_wheel_link"/>
            <origin xyz="0 ${reflect*(base_width/2 + wheel_width/2)} ${-(base_height/2) + wheel_radius - base_lift}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel prefix="left" reflect="1"/>
    <xacro:wheel prefix="right" reflect="-1"/>

    <!-- Casters -->
    <xacro:macro name="caster" params="prefix x_offset">
        <link name="${prefix}_caster_link">
            <visual>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <material name="grey">
                    <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <geometry>
                    <sphere radius="${caster_radius}"/>
                </geometry>
                <surface>
                    <friction>
                        <ode>
                            <mu>0.0</mu>
                            <mu2>0.0</mu2>
                            <slip1>1.0</slip1>
                            <slip2>1.0</slip2>
                        </ode>
                    </friction>
                </surface>
            </collision>
            <inertial>
                <mass value="0.5"/>
                <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
            </inertial>
        </link>

        <joint name="${prefix}_caster_joint" type="fixed">
            <parent link="base_link"/>
            <child link="${prefix}_caster_link"/>
            <origin xyz="${x_offset} 0 ${-(base_height/2) + caster_radius - base_lift}" rpy="0 0 0"/>
        </joint>

        <gazebo reference="${prefix}_caster_link">
            <material>Gazebo/Grey</material>
            <mu1>0.0</mu1>
            <mu2>0.0</mu2>
            <slip1>1.0</slip1>
            <slip2>1.0</slip2>
        </gazebo>
    </xacro:macro>

    <xacro:caster prefix="front" x_offset="${base_length/2 - caster_radius}"/>
    <xacro:caster prefix="rear" x_offset="${-base_length/2 + caster_radius}"/>

    <!-- Gazebo Plugins -->
    <gazebo reference="base_link">
        <material>Gazebo/Blue</material>
    </gazebo>
    <gazebo reference="imu_link">
         <material>Gazebo/Red</material>
    </gazebo>
     <gazebo reference="camera_link">
         <material>Gazebo/Green</material>
    </gazebo>
    <gazebo reference="left_wheel_link">
        <material>Gazebo/Black</material>
    </gazebo>
    <gazebo reference="right_wheel_link">
        <material>Gazebo/Black</material>
    </gazebo>

    <!-- *** ADD LASER SCANNER PLUGIN *** -->
    <gazebo reference="laser_link">
        <sensor type="ray" name="laser_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>true</visualize> <!-- Set to true to see rays in Gazebo -->
            <update_rate>10</update_rate> <!-- Scan rate Hz -->
            <ray>
               <scan>
                  <horizontal>
                        <samples>360</samples> <!-- Number of rays per scan -->
                        <resolution>1</resolution> <!-- Should be 1 -->
                        <min_angle>-${M_PI}</min_angle> <!-- -180 degrees -->
                        <max_angle>${M_PI}</max_angle>  <!-- +180 degrees -->
                  </horizontal>
               </scan>
               <range>
                  <min>0.10</min> <!-- Minimum range -->
                  <max>12.0</max> <!-- Maximum range -->
                  <resolution>0.01</resolution> <!-- Range resolution -->
               </range>
               <noise>
                  <type>gaussian</type>
                  <mean>0.0</mean>
                  <stddev>0.01</stddev>
               </noise>
            </ray>
            <plugin name="gazebo_ros_laser_controller" filename="libgazebo_ros_ray_sensor.so">
               <ros>
                  <!-- Use 'scan' as the topic name -->
                  <remapping>~/out:=scan</remapping>
               </ros>
               <!-- Set the frame ID to the laser link -->
               <frame_name>laser_link</frame_name>
               <!-- Set output type to LaserScan -->
               <output_type>sensor_msgs/LaserScan</output_type>
            </plugin>
        </sensor>
    </gazebo>
    <!-- *** END LASER SCANNER PLUGIN *** -->
    
    <!-- Differential Drive Plugin -->
    <gazebo>
        <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <ros>
                <!-- Namespace is empty -->
            </ros>
            <update_rate>100</update_rate>
            <!-- wheels -->
            <left_joint>left_wheel_joint</left_joint>
            <right_joint>right_wheel_joint</right_joint>
            <!-- kinematics -->
            <wheel_separation>${base_width + wheel_width}</wheel_separation>
            <wheel_diameter>${2*wheel_radius}</wheel_diameter>
            <!-- limits -->
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>
            <!-- output -->
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
            <publish_joint_states>true</publish_joint_states>
            <publish_tf>true</publish_tf>
        </plugin>
    </gazebo>

    <!-- IMU Plugin -->
    <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>false</visualize>
            <plugin name="imu_plugin" filename="libgazebo_ros_imu_sensor.so">
                <ros>
                    <remapping>~/out:=imu/data</remapping>
                </ros>
                <initial_orientation_as_reference>false</initial_orientation_as_reference>
                <frame_name>imu_link</frame_name>
            </plugin>
            <pose>0 0 0 0 0 0</pose>
        </sensor>
    </gazebo>

    <!-- RGBD Camera Plugin -->
    <gazebo reference="camera_link">
        <sensor type="depth" name="camera">
            <always_on>true</always_on>
            <update_rate>20.0</update_rate>
            <camera name="sim_camera">
                <horizontal_fov>${60.0*M_PI/180.0}</horizontal_fov>
                <image>
                    <width>640</width>
                    <height>480</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.1</near>
                    <far>10.0</far>
                </clip>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.007</stddev>
                </noise>
            </camera>
            <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">
                <ros>
                    <remapping>image_raw:=rgb/image_rect_color</remapping>
                    <remapping>depth/image_raw:=depth/image_rect_raw</remapping>
                    <remapping>camera_info:=rgb/camera_info</remapping>
                    <remapping>depth/camera_info:=depth/camera_info</remapping>
                    <remapping>points:=depth/color/points</remapping>
                </ros>
                <camera_name>camera</camera_name>
                <frame_name>camera_depth_optical_frame</frame_name>
                <min_depth>0.1</min_depth>
                <max_depth>10.0</max_depth>
                <hack_baseline>0.0</hack_baseline>
            </plugin>
        </sensor>
    </gazebo>

</robot>